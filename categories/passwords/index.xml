<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>passwords on John Downey</title>
    <link>https://jtdowney.com/categories/passwords/</link>
    <description>John Downey (passwords)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Nov 2015 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://jtdowney.com/categories/passwords/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Don&#39;t wait to fix your password storage</title>
      <link>https://jtdowney.com/blog/2015/11/01/dont-wait-to-fix-your-password-storage/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jtdowney.com/blog/2015/11/01/dont-wait-to-fix-your-password-storage/</guid>
      <description>&lt;p&gt;Over the past few years, I have given a talk on Cryptography Pitfalls at a variety of conferences. One section of the talk covers the evolution of password storage and the &lt;a href=&#34;http://arstechnica.com/security/2012/06/8-million-leaked-passwords-connected-to-linkedin/&#34;&gt;various&lt;/a&gt; &lt;a href=&#34;http://www.cnet.com/news/last-fm-warns-users-of-password-leak/&#34;&gt;data&lt;/a&gt; &lt;a href=&#34;http://www.cnn.com/2012/07/12/tech/web/yahoo-users-hacked/&#34;&gt;breaches&lt;/a&gt; &lt;a href=&#34;http://bgr.com/2014/05/27/ebay-hack-145-million-accounts-compromised/&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;http://www.theverge.com/2013/11/7/5078560/over-150-million-breached-records-from-adobe-hack-surface-online&#34;&gt;last&lt;/a&gt; &lt;a href=&#34;http://qz.com/371676/hackers-breached-slacks-database-containing-users-contact-information-and-passwords/&#34;&gt;few&lt;/a&gt; &lt;a href=&#34;http://gawker.com/whats-actually-inside-the-nightmare-ashley-madison-leak-1725077740&#34;&gt;years&lt;/a&gt;. In addition to covering the ways password storage has been done wrong, I also present the best solutions. Instead of recapping it again, take a look at &lt;a href=&#34;http://codahale.com/how-to-safely-store-a-password/&#34;&gt;Coda Hale&amp;rsquo;s blog post&lt;/a&gt; on the topic.&lt;/p&gt;
&lt;p&gt;A few brave souls will occasionally come up to me later and admit their company still stores passwords in a less than ideal way. There are many reasons for this, but they generally boil down to the fact that the software is old and developers just didn&amp;rsquo;t know any better when they wrote that part of the system.&lt;/p&gt;
&lt;p&gt;When talking to them about how they plan to solve it, most come up with roughly the same solution: when a user logs in, transparently write an updated &lt;code&gt;bcrypt&lt;/code&gt; version of the password to the database. The problem with this solution is that users don&amp;rsquo;t benefit from the new system if they never log in. When teams upgrade their passwords this way, they will often look back years later and find that some users never logged in again. This is especially true in consumer products.&lt;/p&gt;
&lt;p&gt;My advice to them is always the same: &lt;strong&gt;don&amp;rsquo;t wait to fix your password storage&lt;/strong&gt;. You should instead run the existing password hashes through &lt;code&gt;bcrypt&lt;/code&gt; and store that as your password verifier.&lt;/p&gt;
&lt;p&gt;For a hypothetical example, let&amp;rsquo;s say we have an application that was storing passwords as just &lt;code&gt;sha1(password)&lt;/code&gt;. We could then change the code so that the new format for password storage is &lt;code&gt;bcrypt(sha1(password))&lt;/code&gt;. This is perfectly secure and has the benefit that we can derive the value given data we already have. This is a much better solution than silently updating on login. You can do this in three phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy the code that can detect which password a user has and verify it correctly. Write new passwords in the updated &lt;code&gt;bcrypt(sha1(password))&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Run a background job that visits each record in the &lt;code&gt;users&lt;/code&gt; table and updates their password by taking the &lt;code&gt;sha1(password)&lt;/code&gt; format and writing back the &lt;code&gt;bcrypt(sha1(password))&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;Go back and remove the code to detect the two different formats and only ever work with the new format.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you have fixed your password storage, and every user has the benefit right away.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
