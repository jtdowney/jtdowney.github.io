<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cryptography on John Downey</title>
    <link>/tags/cryptography/</link>
    <description>John Downey (cryptography)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Aug 2013 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="/tags/cryptography/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing Trustworthy</title>
      <link>/blog/2013/08/01/introducing-trustworthy/</link>
      <pubDate>Thu, 01 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/08/01/introducing-trustworthy/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve all seen the tense scene in a war movie where the order has come down to launch the nuclear missiles. The captain and his first officer each take out a special key they&amp;rsquo;ve had around their neck the whole time. Then they both insert their individual keys into the weapons computer and turn simultaneously. Despite being a popular motif, this is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Two_man_rule&#34;&gt;real policy&lt;/a&gt; implemented by many military organizations, including the U.S. Air Force. Once you think about it this kind of policy is obvious, one person shouldn&amp;rsquo;t be able to launch nuclear weapons on their own. Trustworthy is like having a two-man rule for your data.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;Trustworthy is implemented as a &lt;a href=&#34;http://rubygems.org/gems/trustworthy&#34;&gt;ruby gem&lt;/a&gt; with the source on &lt;a href=&#34;https://github.com/jtdowney/trustworthy&#34;&gt;GitHub&lt;/a&gt;. When installed via ruby gems it creates a new command line utility named &lt;code&gt;trustworthy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have installed trustworthy, the first step is to generate a new master key. This key is never stored anywhere on disk but is instead derived from at least two user keys.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ trustworthy init
Creating a new master key with 2 keys
Username: user1
Password:
Password (again):
Key user1 added
Username: user2
Password:
Password (again):
Key user2 added
Created trustworthy.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will generate the key in the background and then split it using &lt;a href=&#34;#shamirs-secret-sharing-algorithm&#34;&gt;Shamir&amp;rsquo;s Secret Sharing Algorithm&lt;/a&gt;. You can then use trustworthy to encrypt and decrypt files using this master key.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ trustworthy encrypt secret.txt
Username: user1
Password:
Unlocked user1
Username: user2
Password:
Unlocked user2
Reconstructed master key
Encrypted secret.txt to secret.txt.tw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional users can be added provided two current users unlock the master key to do so.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ trustworthy add-key
Adding a new key to master key
Username: user1
Password:
Unlocked user1
Username: user2
Password:
Unlocked user2
Reconstructed master key
Username: user3
Password:
Password (again):
Added user3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;shamirs-secret-sharing-algorithm&#34;&gt;Shamir&amp;rsquo;s Secret Sharing Algorithm&lt;/h2&gt;
&lt;p&gt;The algorithm behind trustworthy is incredibly simple and requires nothing more than a high school understanding of algebra. Trustworthy uses &lt;a href=&#34;http://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing&#34;&gt;Shamir&amp;rsquo;s Secret Sharing algorithm&lt;/a&gt; to split a master key between two users. In general, Shamir&amp;rsquo;s Secret Sharing algorithm uses a polynomial as the master key. Each user is given a unique point along that polynomial that can be used to reconstruct the master key at a later point. Trustworthy implements the most basic form of Shamir&amp;rsquo;s Secret Sharing algorithm, polynomials of degree one.&lt;/p&gt;
&lt;p&gt;If you think back to high school you might remember the slope intercept form &lt;code&gt;y = mx + b&lt;/code&gt; which defines a line. The y-intercept, &lt;code&gt;b&lt;/code&gt;, is used by trustworthy as the master key.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/introducing-trustworthy-graph.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example, Alice is given the point &lt;code&gt;10, 21&lt;/code&gt;, and Bob is given &lt;code&gt;40, 9&lt;/code&gt;. By themselves, neither Alice nor Bob can figure out the y-intercept. However, once they come together, they can recompute the line and easily derive the y-intercept &lt;code&gt;40&lt;/code&gt;. To protect the points along of the line, trustworthy encrypts the data using a user supplied password. At runtime the user provides the password so that the point can first be decrypted.&lt;/p&gt;
&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you think of a new feature or happen to find a bug feel free to open an issue on &lt;a href=&#34;https://github.com/jtdowney/trustworthy&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
